# INTERACTION WITH P5.JS
------------------------

* Introduction to Interaction in p5.js
--------------------------------------
<1 min
Say we wanted to create a browser-based version of the classic arcade game Asteroids, where the mouse position controlled the movement of the game’s spaceship and the blaster was 
triggered by pressing the spacebar. How would we go about programming those actions?

The p5.js library makes it easy to add interactivity to do something like that! It provides tools that let us turn mouse and keyboard inputs into creative interactions within the canvas!

In this lesson, we will look at the various kinds of interaction that are foundational to p5.js. Specifically, we will look at how to combine key and mouse events to trigger events and 
move drawn shapes around, creating more versatile programs.

* Instructions
--------------
Take a look at the browser window to the right. There is a basic version of the Asteroids arcade game. When we move our mouse around the p5.js canvas, we can see that the ship follows the 
mouse movement. Press the spacebar to trigger the blaster. Lastly, try holding the mouse down while we fire the blaster.

Explore the sketch, and when you’re ready, click “Next” to get started with learning about mouse interactions!

sketch.js
---------
let blasts = [];
let partyR = 255;
let partyG = 255;
let partyB = 255;


function setup() {
  createCanvas(windowWidth, windowHeight);
}

function draw() {
  background(0);

  noFill();
  stroke(255);
  strokeWeight(2);

  ellipse(width / 3, height / 2, 80, 60);
  ellipse(width / 3, height / 2, 60, 80);
  quad(100, 131, 126, 120, 149, 163, 90, 176);
  push();
  translate(width - 200, height - 200)
  shearX(radians(31));
  rect(0, 0, 110, 70);
  pop();
  triangle(width / 5 * 4, height / 4, width / 5 * 4 - 50, height / 4 + 65, width / 5 * 4 + 50, height / 4 + 65);
  square(width / 5 * 4 - 100, height / 4 + 100, 50);

  for (let i = 0; i < 25; i++) {
    point(random(width), random(height));
  }

  noStroke();
  fill(255);

  push();
  // Spaceship follows the mouse position
  translate(mouseX, mouseY);
  triangle(0, -25, -20, 25, 20, 25);
  pop();

  // Create the rainbow blasts when the mouse is pressed
  if (mouseIsPressed) {
    partyR = random(255);
    partyG = random(255);
    partyB = 255;
    fill(partyR, partyG, partyB);
  }
  else {
    fill(255);
  }
  for (let i = 0; i < blasts.length; i++) {
    let xpos = blasts[i][0];
    let ypos = blasts[i][1];

    ellipse(xpos, ypos, 8, 8);

    blasts[i][1] -= 5;
  }

  for (let i = blasts.length - 1; i >= 0; i--) {
    if (blasts[i][1] < 0) {
      blasts.splice(i, 1);
    }
  }
}

// Trigger the blaster by pressing the spacebar
function keyPressed() {
  if (key === ' ') {
    blasts.push([mouseX, mouseY]);
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Making Shapes Move with Mouse Position
----------------------------------------
8 min
p5.js makes it easy for us to use the mouse position with the built-in variables mouseX and mouseY. These two variables allow for a variety of mappings to visual elements in a p5.js 
sketch.

The mouseX and mouseY variables always contain the mouse’s current horizontal and vertical positions, relative to the origin of the canvas. p5.js will continuously check where the mouse 
is and update mouseX and mouseY to the latest position, making these variables ideal for manipulating elements on the canvas dynamically.

// Draw an ellipse sized 100 pixels by 100 pixels positioned at the current mouse position
ellipse(mouseX, mouseY, 100, 100);

In the code example above, the mouseX and mouseY variables are used as the x and y coordinates for the center of the ellipse. This means that whenever the mouse position changes, the 
center position of the ellipse will follow.

To generalize, in situations where numerical values can be used, we can now use the mouseX and mouseY variables!

* Instructions
--------------
Checkpoint 1 Passed
1.
In sketch.js, begin by moving the background() function call into the setup() function.


Hint
The background() function call is located inside of the draw() function.

background(75);

Move this line of code inside the setup() function.

Checkpoint 2 Passed
2.
Inside of the draw() function, create an ellipse with a width and height that are both 75 pixels. Use mouseX for the x coordinate and mouseY for the y coordinate.

When you move your mouse around the canvas, a white ellipse should be duplicating itself continuously.


Hint
Remember that mouseX and mouseY are built-in variables. The syntax for creating an ellipse looks like this:

ellipse(x, y, w, h);

Checkpoint 3 Passed
3.
Using the fill() function, add color to the ellipse, which will change depending on mouse position. For the red value input mouseX, for the green input 135, and for the blue value input 
mouseY.

Now move your mouse around the canvas. The ellipse should be duplicating itself across the canvas with a sort of painterly effect!


Hint
p5.js uses the standard RGB (red, green, blue) color convention, and the fill color can be set like below:

fill(redValue, greenValue, blueValue);

Remember that the fill() function needs to be called before the ellipse or it will not add color to the shape!

sketch.js
---------
function setup() {
  createCanvas(windowWidth, windowHeight);
  noStroke();

  // TODO: Move background() in draw() function here
  background(75);
}

function draw() {
  // TODO: Move below background() to setup()
  ellipse(mouseX, mouseY, 75, 75);

  // TODO: Set fill() using mouseX and mouseY variables
  fill(mouseX, 135, mouseY);
  // TODO: Draw an ellipse using mouseX and mouseY for the x and y position

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------





































































































