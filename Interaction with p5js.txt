# INTERACTION WITH P5.JS
------------------------

* Introduction to Interaction in p5.js
--------------------------------------
<1 min
Say we wanted to create a browser-based version of the classic arcade game Asteroids, where the mouse position controlled the movement of the game’s spaceship and the blaster was 
triggered by pressing the spacebar. How would we go about programming those actions?

The p5.js library makes it easy to add interactivity to do something like that! It provides tools that let us turn mouse and keyboard inputs into creative interactions within the canvas!

In this lesson, we will look at the various kinds of interaction that are foundational to p5.js. Specifically, we will look at how to combine key and mouse events to trigger events and 
move drawn shapes around, creating more versatile programs.

* Instructions
--------------
Take a look at the browser window to the right. There is a basic version of the Asteroids arcade game. When we move our mouse around the p5.js canvas, we can see that the ship follows the 
mouse movement. Press the spacebar to trigger the blaster. Lastly, try holding the mouse down while we fire the blaster.

Explore the sketch, and when you’re ready, click “Next” to get started with learning about mouse interactions!

sketch.js
---------
let blasts = [];
let partyR = 255;
let partyG = 255;
let partyB = 255;


function setup() {
  createCanvas(windowWidth, windowHeight);
}

function draw() {
  background(0);

  noFill();
  stroke(255);
  strokeWeight(2);

  ellipse(width / 3, height / 2, 80, 60);
  ellipse(width / 3, height / 2, 60, 80);
  quad(100, 131, 126, 120, 149, 163, 90, 176);
  push();
  translate(width - 200, height - 200)
  shearX(radians(31));
  rect(0, 0, 110, 70);
  pop();
  triangle(width / 5 * 4, height / 4, width / 5 * 4 - 50, height / 4 + 65, width / 5 * 4 + 50, height / 4 + 65);
  square(width / 5 * 4 - 100, height / 4 + 100, 50);

  for (let i = 0; i < 25; i++) {
    point(random(width), random(height));
  }

  noStroke();
  fill(255);

  push();
  // Spaceship follows the mouse position
  translate(mouseX, mouseY);
  triangle(0, -25, -20, 25, 20, 25);
  pop();

  // Create the rainbow blasts when the mouse is pressed
  if (mouseIsPressed) {
    partyR = random(255);
    partyG = random(255);
    partyB = 255;
    fill(partyR, partyG, partyB);
  }
  else {
    fill(255);
  }
  for (let i = 0; i < blasts.length; i++) {
    let xpos = blasts[i][0];
    let ypos = blasts[i][1];

    ellipse(xpos, ypos, 8, 8);

    blasts[i][1] -= 5;
  }

  for (let i = blasts.length - 1; i >= 0; i--) {
    if (blasts[i][1] < 0) {
      blasts.splice(i, 1);
    }
  }
}

// Trigger the blaster by pressing the spacebar
function keyPressed() {
  if (key === ' ') {
    blasts.push([mouseX, mouseY]);
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Making Shapes Move with Mouse Position
----------------------------------------
8 min
p5.js makes it easy for us to use the mouse position with the built-in variables mouseX and mouseY. These two variables allow for a variety of mappings to visual elements in a p5.js 
sketch.

The mouseX and mouseY variables always contain the mouse’s current horizontal and vertical positions, relative to the origin of the canvas. p5.js will continuously check where the mouse 
is and update mouseX and mouseY to the latest position, making these variables ideal for manipulating elements on the canvas dynamically.

// Draw an ellipse sized 100 pixels by 100 pixels positioned at the current mouse position
ellipse(mouseX, mouseY, 100, 100);

In the code example above, the mouseX and mouseY variables are used as the x and y coordinates for the center of the ellipse. This means that whenever the mouse position changes, the 
center position of the ellipse will follow.

To generalize, in situations where numerical values can be used, we can now use the mouseX and mouseY variables!

* Instructions
--------------
Checkpoint 1 Passed
1.
In sketch.js, begin by moving the background() function call into the setup() function.


Hint
The background() function call is located inside of the draw() function.

background(75);

Move this line of code inside the setup() function.

Checkpoint 2 Passed
2.
Inside of the draw() function, create an ellipse with a width and height that are both 75 pixels. Use mouseX for the x coordinate and mouseY for the y coordinate.

When you move your mouse around the canvas, a white ellipse should be duplicating itself continuously.


Hint
Remember that mouseX and mouseY are built-in variables. The syntax for creating an ellipse looks like this:

ellipse(x, y, w, h);

Checkpoint 3 Passed
3.
Using the fill() function, add color to the ellipse, which will change depending on mouse position. For the red value input mouseX, for the green input 135, and for the blue value input 
mouseY.

Now move your mouse around the canvas. The ellipse should be duplicating itself across the canvas with a sort of painterly effect!


Hint
p5.js uses the standard RGB (red, green, blue) color convention, and the fill color can be set like below:

fill(redValue, greenValue, blueValue);

Remember that the fill() function needs to be called before the ellipse or it will not add color to the shape!

sketch.js
---------
function setup() {
  createCanvas(windowWidth, windowHeight);
  noStroke();

  // TODO: Move background() in draw() function here
  background(75);
}

function draw() {
  // TODO: Move below background() to setup()
  ellipse(mouseX, mouseY, 75, 75);

  // TODO: Set fill() using mouseX and mouseY variables
  fill(mouseX, 135, mouseY);
  // TODO: Draw an ellipse using mouseX and mouseY for the x and y position

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Detecting Mouse Events
------------------------
15 min
p5.js also provides us with functions that trigger when specific mouse events are detected. Some examples of mouse events include pressing the mouse, pressing and releasing the mouse, and 
detecting mouse movements. The mouse event functions in p5.js work like JavaScript DOM events behind the scenes, in which p5.js waits for an event to happen to run specific mouse event 
functions.

The mousePressed() function is called once after every mouse button press over the canvas. This means that the code block within the mousePressed() function will only run once the mouse 
has been pressed. To run the code again, the mouse needs to be released and pressed a second time.

mousePressed() graphic

We can also use the built-in mouseIsPressed variable to determine whether the mouse is pressed or not. When the mouse is pressed, the mouseIsPressed variable evaluates to true, and when 
it is not pressed, it evaluates to false. We can create an if statement using the mouseIsPressed variable to continuously run a code block while the mouse is pressed.

Take a look at mouseEvents.js on the right. The code shows the differences in using the mousePressed() function and the mouseIsPressed variable. Once a mouse press is detected, the 
mouseIsPressed variable returns true and begins drawing ellipses at random positions around the canvas for as long as the mouse is pressed. Simultaneously, the mousePressed() function 
randomly chooses the color of the ellipses and the background, but those colors will not change until the mouse is released and pressed again.

There are also other mouse event functions that p5.js offers, such as:

	. The mouseMoved() function, which can be used to trigger an event every time the mouse moves while the mouse has not been pressed.

	. The mouseClicked() function, which can be used to detect a mouse button press and release over an element.

Some mouse events act in similar ways, but they can be layered to create various interactions within a p5.js project.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the browser window notice the ellipse in the center of the canvas. Currently, it’s pretty bland—let’s make it more interesting!

Open sketch.js and add an if statement into the draw() function. It should have a condition of mouseIsPressed. Inside the code block of the if statement, set the fill value for the 
ellipse below to:

fill(fillValue, 0, 0, 50);

Add an else statement to the if statement. Inside the code block of the else statement set fill to:

fill(0, 0, fillValue, 50);

Note that the fillValue variable used in the if-else statement is declared at the top of the program and initialized with a value of 0 in the setup() function.


Hint
Remember that mouseIsPressed is a built-in variable and has the following syntax when being used in an if statement:

if (mouseIsPressed) {
  // this block of code runs if the mouse is pressed
} else {
  // this block of code runs if the mouse NOT is pressed
}

Checkpoint 2 Passed
2.
After the draw() function, create an empty mouseMoved() function. Inside the function, set the fillValue variable to a random value between 0 and 255.

Now move your mouse around the canvas to see the shape’s color change!


Hint
To generate a random number between 0 and 255 for the variable, the maximum range given to the random() function should be 256 rather than 255. Remember that the randomly generated number
does not include the number given as the maximum range itself.

Checkpoint 3 Passed
3.
After the mouseMoved() function block, at the bottom of the program, create an empty mousePressed() function.


Hint
The function’s syntax should look something like this:

function mousePressed() {
  //this code block will run when mouse is pressed
}

Checkpoint 4 Passed
4.
Using the shapeScale variable declared at the top of the program, double the size of the ellipse each time the mouse is clicked.

To begin, inside the empty mousePressed() function, write an if statement with a condition of:

shapeScale < width

If the statement evaluates to true, assign shapeScale to be twice its current value. Do this using a multiplication assignment operator (*=).

If the statement evaluates to false, the shapeScale variable should be reset to 50.

Now, click on the canvas and see how the ellipse’s size doubles each time the canvas is clicked. When the size of the ellipse becomes larger than the width of the canvas it is reset back 
to its original size of 50.


Hint
The mousePressed() function should look something like this:

 function mousePressed() {
if (shapeScale < width) {
  shapeScale *= 2;
}
else{
  shapeScale = 50;
}
}

mouseEvents.js
--------------
let randR = 0;
let randG = 0;
let randB = 0;

function setup(){
  createCanvas(windowWidth, windowHeight);
  background(255);
}

function draw() { 
  // Code continuously runs when the mouse is held down
  if (mouseIsPressed) {
    let x = random(width);
    let y = random(height);
    fill(randR, randG, randB);
    ellipse(x, y, 16, 16);
  }
}

function mousePressed() {
  clear();
  // Code only runs once each mouse press. 
  randR = random(256);
  randG = random(256);
  randB = random(256);
  background(mouseX % 256, mouseY % 256, randB);
}

sketch.js
---------
let fillValue; // Used to modify the ellipse's fill color
let shapeScale; // Used to scale the size of the ellipse

function setup() {
  createCanvas(windowWidth, windowHeight);
  noStroke();

  fillValue = 0;
  shapeScale = 50;
}

function draw() {
  background(75, 50);

  // TODO: Add if statement to check if mouseIsPressed and set fill colors accordingly
  if (mouseIsPressed) {
    fill(fillValue, 0, 0, 50);
  } else {
    fill(0, 0, fillValue, 50);
  }

  ellipse(width / 2, height / 2, shapeScale, shapeScale);
}

// TODO: Create a mouseMoved() function and inside the function, set fillValue to a random number between 0 and 255
function mouseMoved() {
  fillValue = random(0, 255);
}


// TODO: Create a mousePressed() function and inside the function, modify shapeScale variable
function mousePressed() {
  if(shapeScale < width) {
    shapeScale *= 2;
  } else {
    shapeScale = 50;
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


































































































































