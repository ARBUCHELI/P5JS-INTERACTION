# INTERACTION WITH P5.JS
------------------------

* Introduction to Interaction in p5.js
--------------------------------------
<1 min
Say we wanted to create a browser-based version of the classic arcade game Asteroids, where the mouse position controlled the movement of the game’s spaceship and the blaster was 
triggered by pressing the spacebar. How would we go about programming those actions?

The p5.js library makes it easy to add interactivity to do something like that! It provides tools that let us turn mouse and keyboard inputs into creative interactions within the canvas!

In this lesson, we will look at the various kinds of interaction that are foundational to p5.js. Specifically, we will look at how to combine key and mouse events to trigger events and 
move drawn shapes around, creating more versatile programs.

* Instructions
--------------
Take a look at the browser window to the right. There is a basic version of the Asteroids arcade game. When we move our mouse around the p5.js canvas, we can see that the ship follows the 
mouse movement. Press the spacebar to trigger the blaster. Lastly, try holding the mouse down while we fire the blaster.

Explore the sketch, and when you’re ready, click “Next” to get started with learning about mouse interactions!

sketch.js
---------
let blasts = [];
let partyR = 255;
let partyG = 255;
let partyB = 255;


function setup() {
  createCanvas(windowWidth, windowHeight);
}

function draw() {
  background(0);

  noFill();
  stroke(255);
  strokeWeight(2);

  ellipse(width / 3, height / 2, 80, 60);
  ellipse(width / 3, height / 2, 60, 80);
  quad(100, 131, 126, 120, 149, 163, 90, 176);
  push();
  translate(width - 200, height - 200)
  shearX(radians(31));
  rect(0, 0, 110, 70);
  pop();
  triangle(width / 5 * 4, height / 4, width / 5 * 4 - 50, height / 4 + 65, width / 5 * 4 + 50, height / 4 + 65);
  square(width / 5 * 4 - 100, height / 4 + 100, 50);

  for (let i = 0; i < 25; i++) {
    point(random(width), random(height));
  }

  noStroke();
  fill(255);

  push();
  // Spaceship follows the mouse position
  translate(mouseX, mouseY);
  triangle(0, -25, -20, 25, 20, 25);
  pop();

  // Create the rainbow blasts when the mouse is pressed
  if (mouseIsPressed) {
    partyR = random(255);
    partyG = random(255);
    partyB = 255;
    fill(partyR, partyG, partyB);
  }
  else {
    fill(255);
  }
  for (let i = 0; i < blasts.length; i++) {
    let xpos = blasts[i][0];
    let ypos = blasts[i][1];

    ellipse(xpos, ypos, 8, 8);

    blasts[i][1] -= 5;
  }

  for (let i = blasts.length - 1; i >= 0; i--) {
    if (blasts[i][1] < 0) {
      blasts.splice(i, 1);
    }
  }
}

// Trigger the blaster by pressing the spacebar
function keyPressed() {
  if (key === ' ') {
    blasts.push([mouseX, mouseY]);
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Making Shapes Move with Mouse Position
----------------------------------------
8 min
p5.js makes it easy for us to use the mouse position with the built-in variables mouseX and mouseY. These two variables allow for a variety of mappings to visual elements in a p5.js 
sketch.

The mouseX and mouseY variables always contain the mouse’s current horizontal and vertical positions, relative to the origin of the canvas. p5.js will continuously check where the mouse 
is and update mouseX and mouseY to the latest position, making these variables ideal for manipulating elements on the canvas dynamically.

// Draw an ellipse sized 100 pixels by 100 pixels positioned at the current mouse position
ellipse(mouseX, mouseY, 100, 100);

In the code example above, the mouseX and mouseY variables are used as the x and y coordinates for the center of the ellipse. This means that whenever the mouse position changes, the 
center position of the ellipse will follow.

To generalize, in situations where numerical values can be used, we can now use the mouseX and mouseY variables!

* Instructions
--------------
Checkpoint 1 Passed
1.
In sketch.js, begin by moving the background() function call into the setup() function.


Hint
The background() function call is located inside of the draw() function.

background(75);

Move this line of code inside the setup() function.

Checkpoint 2 Passed
2.
Inside of the draw() function, create an ellipse with a width and height that are both 75 pixels. Use mouseX for the x coordinate and mouseY for the y coordinate.

When you move your mouse around the canvas, a white ellipse should be duplicating itself continuously.


Hint
Remember that mouseX and mouseY are built-in variables. The syntax for creating an ellipse looks like this:

ellipse(x, y, w, h);

Checkpoint 3 Passed
3.
Using the fill() function, add color to the ellipse, which will change depending on mouse position. For the red value input mouseX, for the green input 135, and for the blue value input 
mouseY.

Now move your mouse around the canvas. The ellipse should be duplicating itself across the canvas with a sort of painterly effect!


Hint
p5.js uses the standard RGB (red, green, blue) color convention, and the fill color can be set like below:

fill(redValue, greenValue, blueValue);

Remember that the fill() function needs to be called before the ellipse or it will not add color to the shape!

sketch.js
---------
function setup() {
  createCanvas(windowWidth, windowHeight);
  noStroke();

  // TODO: Move background() in draw() function here
  background(75);
}

function draw() {
  // TODO: Move below background() to setup()
  ellipse(mouseX, mouseY, 75, 75);

  // TODO: Set fill() using mouseX and mouseY variables
  fill(mouseX, 135, mouseY);
  // TODO: Draw an ellipse using mouseX and mouseY for the x and y position

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Detecting Mouse Events
------------------------
15 min
p5.js also provides us with functions that trigger when specific mouse events are detected. Some examples of mouse events include pressing the mouse, pressing and releasing the mouse, and 
detecting mouse movements. The mouse event functions in p5.js work like JavaScript DOM events behind the scenes, in which p5.js waits for an event to happen to run specific mouse event 
functions.

The mousePressed() function is called once after every mouse button press over the canvas. This means that the code block within the mousePressed() function will only run once the mouse 
has been pressed. To run the code again, the mouse needs to be released and pressed a second time.

mousePressed() graphic

We can also use the built-in mouseIsPressed variable to determine whether the mouse is pressed or not. When the mouse is pressed, the mouseIsPressed variable evaluates to true, and when 
it is not pressed, it evaluates to false. We can create an if statement using the mouseIsPressed variable to continuously run a code block while the mouse is pressed.

Take a look at mouseEvents.js on the right. The code shows the differences in using the mousePressed() function and the mouseIsPressed variable. Once a mouse press is detected, the 
mouseIsPressed variable returns true and begins drawing ellipses at random positions around the canvas for as long as the mouse is pressed. Simultaneously, the mousePressed() function 
randomly chooses the color of the ellipses and the background, but those colors will not change until the mouse is released and pressed again.

There are also other mouse event functions that p5.js offers, such as:

	. The mouseMoved() function, which can be used to trigger an event every time the mouse moves while the mouse has not been pressed.

	. The mouseClicked() function, which can be used to detect a mouse button press and release over an element.

Some mouse events act in similar ways, but they can be layered to create various interactions within a p5.js project.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the browser window notice the ellipse in the center of the canvas. Currently, it’s pretty bland—let’s make it more interesting!

Open sketch.js and add an if statement into the draw() function. It should have a condition of mouseIsPressed. Inside the code block of the if statement, set the fill value for the 
ellipse below to:

fill(fillValue, 0, 0, 50);

Add an else statement to the if statement. Inside the code block of the else statement set fill to:

fill(0, 0, fillValue, 50);

Note that the fillValue variable used in the if-else statement is declared at the top of the program and initialized with a value of 0 in the setup() function.


Hint
Remember that mouseIsPressed is a built-in variable and has the following syntax when being used in an if statement:

if (mouseIsPressed) {
  // this block of code runs if the mouse is pressed
} else {
  // this block of code runs if the mouse NOT is pressed
}

Checkpoint 2 Passed
2.
After the draw() function, create an empty mouseMoved() function. Inside the function, set the fillValue variable to a random value between 0 and 255.

Now move your mouse around the canvas to see the shape’s color change!


Hint
To generate a random number between 0 and 255 for the variable, the maximum range given to the random() function should be 256 rather than 255. Remember that the randomly generated number
does not include the number given as the maximum range itself.

Checkpoint 3 Passed
3.
After the mouseMoved() function block, at the bottom of the program, create an empty mousePressed() function.


Hint
The function’s syntax should look something like this:

function mousePressed() {
  //this code block will run when mouse is pressed
}

Checkpoint 4 Passed
4.
Using the shapeScale variable declared at the top of the program, double the size of the ellipse each time the mouse is clicked.

To begin, inside the empty mousePressed() function, write an if statement with a condition of:

shapeScale < width

If the statement evaluates to true, assign shapeScale to be twice its current value. Do this using a multiplication assignment operator (*=).

If the statement evaluates to false, the shapeScale variable should be reset to 50.

Now, click on the canvas and see how the ellipse’s size doubles each time the canvas is clicked. When the size of the ellipse becomes larger than the width of the canvas it is reset back 
to its original size of 50.


Hint
The mousePressed() function should look something like this:

 function mousePressed() {
if (shapeScale < width) {
  shapeScale *= 2;
}
else{
  shapeScale = 50;
}
}

mouseEvents.js
--------------
let randR = 0;
let randG = 0;
let randB = 0;

function setup(){
  createCanvas(windowWidth, windowHeight);
  background(255);
}

function draw() { 
  // Code continuously runs when the mouse is held down
  if (mouseIsPressed) {
    let x = random(width);
    let y = random(height);
    fill(randR, randG, randB);
    ellipse(x, y, 16, 16);
  }
}

function mousePressed() {
  clear();
  // Code only runs once each mouse press. 
  randR = random(256);
  randG = random(256);
  randB = random(256);
  background(mouseX % 256, mouseY % 256, randB);
}

sketch.js
---------
let fillValue; // Used to modify the ellipse's fill color
let shapeScale; // Used to scale the size of the ellipse

function setup() {
  createCanvas(windowWidth, windowHeight);
  noStroke();

  fillValue = 0;
  shapeScale = 50;
}

function draw() {
  background(75, 50);

  // TODO: Add if statement to check if mouseIsPressed and set fill colors accordingly
  if (mouseIsPressed) {
    fill(fillValue, 0, 0, 50);
  } else {
    fill(0, 0, fillValue, 50);
  }

  ellipse(width / 2, height / 2, shapeScale, shapeScale);
}

// TODO: Create a mouseMoved() function and inside the function, set fillValue to a random number between 0 and 255
function mouseMoved() {
  fillValue = random(0, 255);
}


// TODO: Create a mousePressed() function and inside the function, modify shapeScale variable
function mousePressed() {
  if(shapeScale < width) {
    shapeScale *= 2;
  } else {
    shapeScale = 50;
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Understanding the dist() Function
-----------------------------------
13 min
The dist() function is a powerful tool for calculating the distance between two points, stationary or dynamic. This function is oftentimes used in conjunction with mouse events. 
Understanding how and when to use dist() can simplify calculations and make fun and interesting sketches.

Diagram of the dist() function

The dist() function takes four arguments: the x and y coordinates of the first point (x1 and y1 in the diagram above) and the x and y coordinates of the second point (x2 and y2 above).

For example, you can use the dist() function to calculate the dynamic distance between the center of the canvas and the mouse position as follows:

let distance = dist(mouseX, mouseY, width / 2, height / 2);

The distance variable in the above code will return the distance between the center of the canvas and the mouse position wherever the mouse is.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s create a spotlight effect using the mouse position. The spotlight will reveal and distort the grid of ellipses being drawn across the canvas!

At the bottom of the setup() function in sketch.js, assign the canvas_dist variable to the dist() function that calculates the distance between the following two points:

	. The origin of the canvas at (0, 0)

	. The bottom-right corner of the canvas at (width, height)

This will calculate the diagonal distance across the canvas.


Hint
You can calculate the diagonal distance across the canvas from the top-left corner at the origin to the bottom-right corner at (width, height) using the dist() function. Remember that the 
function takes 4 arguments: x and y positions of two endpoints.

Checkpoint 2 Passed
2.
Now, to determine the distance between the mouse position and each ellipse’s position, we will use the dist() function again.

Inside the nested for loops in the draw() function block, use the dist() function to calculate the distance between mouseX, mouseY, and the i and j iterator variables. Create and store 
the output of the dist() function’s calculation in a variable called size.


Hint
Calculate the distance between the mouse position at (mouseX, mouseY) and the position of each ellipse in the grid at (i, j) using the dist() function.

Store the result of the dist() function in a newly created variable called size. Remember to do this inside the nested for loops.

Checkpoint 3 Passed
3.
Below the size variable initialization, re-assign size to:

(size / canvas_dist) * 70

This sets the size variable to be proportionate to the size of the canvas. Here, we multiply by 70 to scale the spotlight appropriately.


Hint
Reassign the size variable to the calculation of size in proportion to the size of the canvas so we can begin making the spotlight effect.

Make sure to do this below our dist() calculation from the previous step.

Checkpoint 4 Passed
4.
At the end of the draw() function inside the nested for loops, a grid of ellipses is drawn at x position i and y position j.

Currently, the ellipses have a width and height of 10 pixels—replace them with the size variable.

Run the code. Move the mouse across the canvas and see the spotlight effect happen!

Optionally, try uncommenting the second fill() function and run the code. Play around with the iteration statement in the for loops and the value that the size variable is being factored 
by! All of these will affect the outcome of the sketch differently.


Hint
By replacing the ellipse’s width and height with the size variable, the mouse’s position on the canvas proportionally changes the size of every ellipse around a certain radius of the 
mouse.

sketch.js
---------
// Stores diagnal distance across the canvas
let canvas_dist;

function setup() {
  createCanvas(windowWidth, windowHeight);
  noStroke();

  // TODO: Use the dist() function to calculate the diagonal distance across the canvas
  canvas_dist = dist(0, 0, width, height);
}

function draw() {
  background(255, 40);

  // Nested for loops tp draw a grid of ellipses
  for (let i = 0; i <= width; i += 15) {
    for (let j = 0; j <= height; j += 15) {
      // TODO: Calculate the distance between mouse position and each ellipse's position
      let size = dist(mouseX, mouseY, i, j);
      // TODO: Reassign size to be proportional to the size of the canvas
      size = (size / canvas_dist) * 70;
      fill(0);
      // Try uncommenting the second fill function below:
      //fill(j, i,size, 10 );
      // TODO: set width and height of ellipse to size variable
      ellipse(i, j, size, size);
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Using Key Input
-----------------
18 min
The p5.js library has the ability to store data from the keyboard input for a variety of uses. For example, suppose we wanted to know when a certain key was typed and have that key 
trigger a unique event or have key input be part of a game. Both are possible in p5.js!

But before we get further into the details of key input in p5.js, it is important that we have a basic understanding of ASCII code, the standard representation of characters that allows 
computers to understand key inputs.

ASCII stands for the American Standard Code for Information Interchange and is a 7-bit character code where each bit represents a unique character. For example, the lowercase ‘a’ in ASCII 
code has a decimal value of 97, the hexadecimal value of 61 in, and the binary value of 1100001. This numeric representation in decimal value is important to remember. This ASCII table 
provides a full list of the code.

Now that we have a basic grasp of ASCII, let’s dive into key input!

The built-in key variable stores alphanumeric characters. More specifically, it holds the value of the most recent key pressed. So if the most recently pressed key was f and we were to 
console.log(key) then it would log f to the console.

This means that the key variable can also be used to determine if a specific key was pressed. In the example below, we are using an if statement to draw some text if the key value pressed 
is a.

// If the 'a' key is pressed, draw the following text in the canvas
if (key === 'a'){
textSize(22);
text('a key was pressed!', width / 2, height / 2);
} 

It is important to note that key works best with non-special keys such as ‘a’, ‘t’, and ‘x’.

The other important key input variable we are going to learn about is the keyCode variable. The keyCode variable stores the decimal value of the ASCII code of the most recently pressed 
key. It can also be used to detect special keys such as BACKSPACE, DELETE, ENTER, RETURN, TAB, and more. A larger list of special keys can be found on the p5.js keyCode reference page.

Similar to the example code above, the code below will draw text to the canvas when the correct keyCode input is detected. In this instance, that input is 32 which is the ASCII code’s 
decimal value for the space character.

// If the spacebar is pressed, draw the following text in the canvas
if (keyCode === 32) {
  textSize(22);
  text('The spacebar key was pressed!', width / 2, height / 2);
}

If you are not familiar with the text() and textSize() functions used in the examples above, the text() function is used to draw text onto the canvas. The textSize() function sets the 
size of the text.

While the key variable can detect both uppercase and lowercase characters, the keyCode variable is unable to differentiate the ASCII values from each other. For example, if we were to 
print the keyCode value of ‘a’ and ‘A’ both would print out the number 65, even though the decimal value of the ASCII code of ‘a’ is 97.

* Instructions
--------------
Checkpoint 1 Passed
1.
In sketch.js, there is a maze with text at the top-left corner of the canvas saying “Make it to the end of the maze!”

On line 29, the text() function call is where the static 'Make it to the end of the maze!' text is displayed. Replace the static text with the key variable.

Now run the code and type to see each letter appear at the top-left corner of the canvas.


Hint
Replace the text() function’s first parameter with the key variable on line 29.

Checkpoint 2 Passed
2.
Use the ASCII table to assign the correct ASCII decimal values of the A, S, D, and W variables defined in the setup() function.


Hint
The ASCII decimal value for 'A' is 65. This was found on the leftmost column of the table under the “ASCII printable characters” section.

All ASCII decimal values for capital letters fall between 65 to 90 in the table.

Checkpoint 3 Passed
3.
Use the keyCode variable to make the existing rectangle move from the start of the maze to the end with the ‘A’, ‘S’, ‘D’, and W’ keys.

To begin, inside of the draw() function, create an if statement where the conditional is checking if the value of the keyCode variable is equal to the variable A. If it returns true, 
decrement the xVal variable by 5.


Hint
The keyCode variable is used to check that the A variable was properly assigned.

Remember that you can decrement a value by writing:

x -= amount;

This takes the current value of the variable and then subtracts amount from it.

Checkpoint 4 Passed
4.
Next, create an else if statement, again checking the keyCode value but this time to see if it equals to D. If it returns true, increment the xVal variable by 5.


Hint
Make sure keyCode is checked against the variable D in the if statement’s condition.

Remember that you can increment a value by writing:

x += amount;

This takes the current value of the variable and then adds amount to it.

Checkpoint 5 Passed
5.
Continuing with the format, create a third else if statement and check to see if keyCode is equal to S. If it returns true, increment the yVal variable by 5.


Hint
The keyCode variable should be checked against the variable S in the if statement’s condition.

Remember that you can increment a value by writing:

x += amount;

This takes the current value of the variable and then adds amount to it.

Checkpoint 6 Passed
6.
Create one last else if statement and check if keyCode is equal to W. If it returns true, decrement the yVal variable by 5.

Now run the code and use the ‘A’, ‘S’, ‘D’, and W’ keys to move the rectangle from the top of the maze to the bottom. Try not to go over any of the walls!


Hint
The keyCode variable should be checked against the variable W in the if statement’s condition.

Remember that you can decrement a value by writing:

x -= amount;

This takes the current value of the variable and then subtracts amount from it.

sketch.js
---------
et A;
let S;
let D;
let W;
let xVal;
let yVal;

function setup() {
  createCanvas(500, 470);
  frameRate(25);
  rectMode(CENTER);

  xVal = 450;
  yVal = 80;

  // TODO: Assign the following variables the proper ASCII decimal values
  A = 65;
  D = 68;
  S = 83;
  W = 87;
}

function draw() {
  background(220);

  textSize(25);
  fill( 0, 180 ,120);
  // TODO: Change the first argument of text() function to the key variable
  text(key, 10, 30);
  drawMaze();

  // Use keyCode and the newly assigned A, S, D, and W variables to move the rectangle through the maze
  // TODO: Move the rectangle to the left if 'a' is pressed
  if(keyCode === A) {
    xVal -= 5;
  }
  // TODO: Move the rectangle to the right if 'd' is pressed
  else if (keyCode === D) {
    xVal += 5;
  }
  // TODO: Move the rectangle to the down if 's' is pressed
  else if (keyCode === S) {
    yVal += 5;
  }
  // TODO: Move the rectangle to the up if 'w' is pressed
  else if (keyCode === W) {
    yVal -= 5;
  }
  
  if(yVal - 27  > 450 && xVal - 27 < 75) {
    textSize(80)
    background(0, 0, 130, 80)
    text('YOU WON!!', 20, height / 2);
  }
  
  textSize(25);
  fill(0,0, 200);
  text('Start', 420, 40);
  text('End', 26, 450);
  fill(180, 90, 180);
  rect(xVal, yVal, 55, 55);
}

function drawMaze(){
  line(10, 50, 410, 50);
  line(10, 50, 10,450);
  line(490, 50, 490, 450);
  line(90, 450, 490, 450);
  line(170, 50, 170, 130);
  line(10, 290, 90, 290);
  line(90, 130, 90, 210);
  line(90, 210, 250, 210);
  line(250, 130, 250, 290);
  line(250, 290, 330,290);
  line(330, 290, 330, 370);
  line(90, 370, 410, 370);
  line(170, 290, 170, 370);
  line(490, 130, 330, 130);
  line(330, 130, 330, 210);
  line(330, 210, 410, 210);
  line(410, 210, 410, 370);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------




























































































































































































